// 1. Basic schema
const UserSchema = z.object({
  username: z.string(),
})

const user = { username: "John"}

type User = z.infer<typeof UserSchema>

console.log(UserSchema.parse(user))

see that properties are rquired by default

// 2. sometimes we need boolean function to see if parsing was correct. This is important for forms

console.log(UserSchema.safeParse(user))

// Types

// primitive
z.string()
z.number()
z.bigint()
z.date()
z.boolean()
z.array(z.string())
z.undefined()
z.null()
z.void()
z.any()
z.unknown()
z.never()


// Lets do validation beyond that something exists and that is of the right type because we can do that in typescript

.min(5)
.max(8)
.email()
.url()
.gt(0)
.lt(5)

.nullable()
.nullish()  // undefined is null

.default(true)

.literal(true) // always this exact value

hobbies: z.enum(["Programming", "Exercise", "Lego"])

the do with ts enum

enum Hobbies {
    Programming,
    Exercise,
    Lego
} <- better use zod enum that has a better support, recommended by zod

hobbies.nativeEnum(Hobbies)


// Object type
console.log(UserSchema.shape)
console.log(UserSchema.partial().parse(user)) <- good for forms that can have optional fields

UserSchema ... .pick({username: true}) .omit({username: true})
.deepPartial()

.extend({password: z.string()})

.merge(z.object({ password: z.string()}))

.passthrough()   all additional keys are being passed that are not defined in schema

.strict() fails if there is a key that is not defined

z.array(z.string()).nonempty()
z.tuple([z.number(), z.number(), z.number()]) 

id: z.union([z.string(), z.number()]) // z.string().or(z.number())

z.record(z.string()) <- doesn't care about the key, only cares about the value


// transforms

const stringToNumber = z.string().transform((val) => val.length);

// ⚠️ Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number

// equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number

.set()
.map()
.promise()

// advanced validation

const brandEmail = z
    .string()
    .email()
    .refine(val => val.endsWith("@exampledomain.com"),
    {
        message: "Email must end with @exampledomain.com"
    })

const UserSchema = z.object({
  username: z.string().min(5, "Minimum length must be 5"),
})

npm i zod-validation-error

import {fromZodError} from "zod-validation-error"

if (!results.success) {
    console.log(fromZodError(results.error))
} <- better for apis not frontend like forms